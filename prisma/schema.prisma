// Arquivo: prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Perfeito para o Neon que você conectou
  url      = env("DATABASE_URL")
}

// Modelo para os usuários do aplicativo
model User {
  id        String    @id @default(cuid())
  name      String
  email     String    @unique
  bookings  Booking[] // Um usuário pode ter vários agendamentos
}

// Modelo para as barbearias
model Barbershop {
  id        String    @id @default(cuid())
  name      String
  address   String
  imageUrl  String
  phone     String
  services  Service[] // Uma barbearia oferece vários serviços
  bookings  Booking[] // Uma barbearia tem vários agendamentos
}

// Modelo para os serviços (Corte, Barba, etc.)
model Service {
  id            String     @id @default(cuid())
  name          String
  price         Decimal    @db.Decimal(10, 2) // Preço com 2 casas decimais
  description   String
  imageUrl      String
  barbershopId  String
  barbershop    Barbershop @relation(fields: [barbershopId], references: [id])
  bookings      Booking[]  // Um serviço pode estar em vários agendamentos
}

// Modelo para os agendamentos (a informação central)
// Este modelo conecta um Usuário, uma Barbearia e um Serviço em uma data específica.
// Corresponde exatamente ao que seu componente `booking-item.tsx` precisa.
model Booking {
  id            String     @id @default(cuid())
  userId        String
  user          User       @relation(fields: [userId], references: [id])
  serviceId     String
  service       Service    @relation(fields: [serviceId], references: [id])
  barbershopId  String
  barbershop    Barbershop @relation(fields: [barbershopId], references: [id])
  date          DateTime
  createdAt     DateTime   @default(now())
}
